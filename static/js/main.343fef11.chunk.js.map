{"version":3,"sources":["logic/book.js","components/CategoryFilter/CategoryFilter.js","actions/index.js","components/Book/Book.js","containers/BooksList/BooksList.js","containers/BooksForm/BooksForm.js","App.js","serviceWorker.js","reducers/books.js","store/index.js","reducers/filter.js","index.js"],"names":["Book","id","title","category","BOOK_CATEGORIES","CategoryFilter","props","react_default","a","createElement","Form","Row","Col","xs","md","lg","Control","as","onChange","event","handleFilterChange","parseInt","target","value","map","index","key","CREATE_BOOK","REMOVE_BOOK","CHANGE_FILTER","components_Book_Book","className","book","onClick","removeBook","connect","state","bookstore","filter","indexOf","dispatch","dispatchRemoveBook","type","data","dispatchChangeFilter","changeFilter","BooksForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleSubmit","preventDefault","newBook","Math","random","dispatchAddBook","_handleChange","setState","defineProperty","_this2","placeholder","Button","variant","Component","createBook","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","containers_BooksList_BooksList","containers_BooksForm_BooksForm","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343fef11.chunk.js","sourcesContent":["export const Book = (id, title, category) => {\n\n    return {\n        id,\n        title,\n        category\n    }\n}\n\nexport const BOOK_CATEGORIES =  [\"Action\", \"Biography\", \"History\", \"Horror\", \"Kids\", \"Learning\", \"Sci-Fi\"]\n","import React from 'react'\nimport {Col, Form, Row} from \"react-bootstrap\";\nimport {BOOK_CATEGORIES} from \"../../logic/book\";\n\n\nexport default props => (\n    <div>\n        <Form>\n            <Row>\n                <Col xs={12} md={4} lg={2}>\n                    <Form.Control as=\"select\" onChange={event => props.handleFilterChange(parseInt(event.target.value))}>\n                        <option value={-1}>Option All</option>\n                        {BOOK_CATEGORIES.map((category, index) => <option value={index} key={index}>{category}</option>)}\n                    </Form.Control>\n                </Col>\n            </Row>\n        </Form>\n    </div>\n)","export const CREATE_BOOK = 'CREATE_BOOK';\nexport const REMOVE_BOOK = 'REMOVE_BOOK';\nexport const CHANGE_FILTER = 'CHANGE_FILTER'\n\nexport function createBook(book) {\n    return {\n        type: CREATE_BOOK,\n        data: book\n    }\n}\n\nexport function removeBook(book) {\n    return {\n        type: REMOVE_BOOK,\n        data: book\n    }\n}\n\nexport function changeFilter(category) {\n    return {\n        type: CHANGE_FILTER,\n        data: category\n    }\n}\n","import React from 'react'\nimport './Book.css'\n\n\nexport default props => (<div className={'book'}>\n    <p className={'book-category'}>{props.book.category}</p>\n    <h2 className={'book-title'}>{props.book.title}</h2>\n    <p className={'book-remove'} onClick={() => props.removeBook(props.book)}>Remove</p>\n</div>)\n","import React from 'react'\nimport {connect} from \"react-redux\";\n\nimport { BOOK_CATEGORIES } from \"../../logic/book\";\nimport CategoryFilter from \"../../components/CategoryFilter/CategoryFilter\";\nimport { changeFilter, removeBook } from \"../../actions\";\nimport Book from \"../../components/Book/Book\";\n\n\nconst BooksList = props => (\n    <div>\n        <CategoryFilter handleFilterChange={props.dispatchChangeFilter} />\n        {props.bookstore.map((book, index) => <Book book={book} key={index} removeBook={book => props.dispatchRemoveBook(book)}/> )}\n    </div>\n)\n\n\nconst mapStateToProps = (state) => ({\n    bookstore: state.bookstore.filter(book => (state.filter === -1 || state.filter === BOOK_CATEGORIES.indexOf(book.category))),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    dispatchRemoveBook: (book) => dispatch(removeBook(book)),\n    dispatchChangeFilter: (category) => dispatch(changeFilter(category))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList)\n","import React, {Component} from 'react'\nimport {Form, Col, Row, Button} from \"react-bootstrap\";\nimport './BooksForm.css'\nimport {connect} from \"react-redux\";\nimport {Book, BOOK_CATEGORIES} from \"../../logic/book\";\nimport { createBook } from \"../../actions\";\nimport PropTypes from \"prop-types\";\n\nclass BooksForm extends Component {\n    static propTypes = {\n        dispatchAddBook: PropTypes.func.isRequired\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            category: 0\n        }\n    }\n    _handleSubmit = (event) => {\n        if (event) {\n            event.preventDefault();\n            const newBook = Book(Math.random(), this.state.title, BOOK_CATEGORIES[parseInt(this.state.category)]);\n            this.props.dispatchAddBook(newBook);\n        }\n\n\n    }\n\n    _handleChange = (key, value) => {\n        this.setState({[key]: value})\n    }\n\n    render() {\n        return (\n            <div className={'booksform'}>\n                <h3 className={'booksform-heading'}>Add New Book</h3>\n                <Form>\n                    <Row>\n                        <Col>\n                            <Form.Control placeholder=\"Book Title\" value={this.state.title} onChange={(event) => this._handleChange('title', event.target.value)}/>\n                        </Col>\n                        <Col>\n                            <Form.Control as=\"select\" value={this.state.category} onChange={(event) => this._handleChange('category', event.target.value)}>\n                                {BOOK_CATEGORIES.map((category, index) => <option value={index} key={index}>{category}</option>)}\n                            </Form.Control>\n                        </Col>\n                        <Col>\n                            <Button variant=\"primary\" type=\"submit\" onClick={this._handleSubmit}>\n                                Add Book\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatchAddBook: (book) => dispatch(createBook(book))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(BooksForm)","import React from 'react';\nimport './App.css';\nimport BooksList from \"./containers/BooksList/BooksList\";\nimport BooksForm from \"./containers/BooksForm/BooksForm\";\nimport { Navbar } from 'react-bootstrap'\n\n\nconst App = () =>  {\n    return (\n        <div className=\"app\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Bookstore CMS</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            </Navbar>\n\n            <div className={'app-body'}>\n\n                <BooksList/>\n                <BooksForm/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CREATE_BOOK, REMOVE_BOOK} from \"../actions\";\nimport {Book} from \"../logic/book\";\nimport {BOOK_CATEGORIES} from \"../logic/book\";\n\nconst initialState = [\n    Book(Math.random(), 'Avengers Infinity', BOOK_CATEGORIES[0])\n]\n\nexport const bookstore = (state = initialState, action) => {\n\n    switch (action.type) {\n        case CREATE_BOOK:\n            return [...state, action.data]\n        case REMOVE_BOOK:\n            return state.filter((book) => book.id !== action.data.id)\n        default:\n            return state\n    }\n}","import { createStore, combineReducers } from 'redux';\nimport {bookstore} from '../reducers/books'\nimport { filter } from \"../reducers/filter\";\n\nconst rootReducer = combineReducers({\n    bookstore,\n    filter\n})\n\nconst store = createStore(\n    rootReducer\n)\nexport default store","import { CHANGE_FILTER } from \"../actions\";\n\nconst initialState = -1\n\n\nexport const filter = (state = initialState, action) => {\n    switch (action.type) {\n        case CHANGE_FILTER:\n            return action.data;\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index'\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}