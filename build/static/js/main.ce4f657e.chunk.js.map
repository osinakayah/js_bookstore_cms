{"version":3,"sources":["components/Book/Book.js","containers/BooksList/BooksList.js","logic/book.js","components/BooksForm/BooksForm.js","App.js","serviceWorker.js","actions/index.js","reducers/books.js","reducers/index.js","index.js"],"names":["Book","react_default","a","createElement","Component","BooksList","Book_Book","book","id","Math","random","title","category","BooksForm","App","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","BooksList_BooksList","BooksForm_BooksForm","Boolean","window","location","hostname","match","CREATE_BOOK","REMOVE_BOOK","initialState","books","categeory","rootReducer","combineReducers","reducer","state","arguments","length","undefined","action","type","Object","assign","concat","data","store","createStore","console","log","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAGqBA,mLAMb,OACIC,EAAAC,EAAAC,cAAA,mBAPsBC,aCCbC,mLAIb,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACG,EAAD,CAAMC,MCVDC,EDUiBC,KAAKC,SCVlBC,EDU4B,OCVrBC,EDU6B,ECRlD,CACHJ,KACAG,QACAC,gBALY,IAACJ,EAAIG,EAAOC,SDIOR,aEClBS,mLAEb,OACIZ,EAAAC,EAAAC,cAAA,gCAH4BC,6BCsBzBU,MApBf,WACI,OACIb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACXd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtBjB,EAAAC,EAAAC,cAACa,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,mBACAnB,EAAAC,EAAAC,cAACa,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7BrB,EAAAC,EAAAC,cAACa,EAAA,EAAOO,SAAR,CAAiBf,GAAG,oBAChBP,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKT,UAAU,WACXd,EAAAC,EAAAC,cAACqB,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAAf,QACAnB,EAAAC,EAAAC,cAACqB,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAAf,WAPhB,IAYInB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAACwB,EAAD,QCVQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEClBOC,EAAc,cACdC,EAAc,cCC3B,IAAMC,EAAe,CACjBC,MAAO,CACH,CAAC5B,GAAIC,KAAKC,SAAU2B,UAAW,EAAG1B,MAAO,mBCD3C2B,EAAcC,YAAgB,CAChCC,QDImB,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBP,EAAcU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAQC,EAAOC,MACX,KAAKb,EAEL,KAAKC,EACD,OAAOa,OAAOC,OAAOP,EAAO,CAACL,MAAOK,EAAML,MAAMa,OAAOJ,EAAOK,QAClE,QACI,OAAOT,MCRbU,EAAQC,YACVd,GAEJe,QAAQC,IAAIH,EAAMI,YACHJ,gBCFfK,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAUP,MAAOA,GAAOlD,EAAAC,EAAAC,cAACwD,EAAD,OAAmBC,SAASC,eAAe,SJwH7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ce4f657e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Book extends Component {\n    static propTypes = {\n        book: PropTypes.object.isRequired\n    }\n\n    render() {\n        return (\n            <div>\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Book from \"../../components/Book/Book\";\nimport { Book as BookModel } from \"../../logic/book\";\n\nexport default class BooksList extends Component {\n\n\n    render() {\n        return (\n            <div>\n                <Book book={BookModel(Math.random(), 'High', 1)}/>\n            </div>\n        )\n    }\n\n}","export const Book = (id, title, category) => {\n\n    return {\n        id,\n        title,\n        category\n    }\n}","import React, { Component } from 'react'\n\n\n// const BOOK_CATERGORIES = [\"Action\", \"Biography\", \"History\", \"Horror\", \"Kids\", \"Learning\", \"Sci-Fi\"];\n\nexport default class BooksForm extends  Component {\n    render() {\n        return (\n            <div>\n                Books Form\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport BooksList from \"./containers/BooksList/BooksList\";\nimport BooksForm from \"./components/BooksForm/BooksForm\";\nimport { Navbar, Nav } from 'react-bootstrap'\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>;\n\n            <BooksList/>\n            <BooksForm/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CREATE_BOOK = 'CREATE_BOOK';\nexport const REMOVE_BOOK = 'REMOVE_BOOK';\n\nexport function createBook(book) {\n    return {\n        type: CREATE_BOOK,\n        data: book\n    }\n}\n\nexport function removeBook(book) {\n    return {\n        type: REMOVE_BOOK,\n        data: book\n    }\n}\n","import {CREATE_BOOK, REMOVE_BOOK} from \"../actions\";\n\nconst initialState = {\n    books: [\n        {id: Math.random(), categeory: 1, title: 'Alice and Hmm'}\n    ]\n}\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_BOOK:\n            return Object.assign(state, {books: state.books.concat(action.data)})\n        case REMOVE_BOOK:\n            return Object.assign(state, {books: state.books.concat(action.data)})\n        default:\n            return state\n    }\n}\n\n// export default reducer;","import { createStore, combineReducers } from 'redux';\nimport {reducer} from './books'\n\nconst rootReducer = combineReducers({\n    reducer\n})\n\nconst store = createStore(\n    rootReducer\n)\nconsole.log(store.getState())\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './reducers/index'\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}